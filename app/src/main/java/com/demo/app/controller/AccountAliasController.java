
// Generated by AI (GitHub Copilot)
// Author: Nisarg Raval
package com.demo.app.controller;

import com.demo.app.model.AccountAlias;
import com.demo.app.model.User;
import com.demo.app.service.AccountAliasService;
import com.demo.app.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

@RestController
@RequestMapping("/api/aliases")
public class AccountAliasController {
    @Autowired
    private AccountAliasService aliasService;
    @Autowired
    private UserService userService;

    @PostMapping("/create/{userId}")
    public ResponseEntity<?> createAlias(@PathVariable("userId") Long userId, @RequestBody AccountAlias alias) {
        if (aliasService.findByAlias(alias.getAlias()).isPresent()) {
            return ResponseEntity.badRequest().body("Alias already exists");
        }
        Optional<User> user = userService.findById(userId);
        if (user.isEmpty()) {
            return ResponseEntity.badRequest().body("User not found");
        }
        alias.setUser(user.get());
        return ResponseEntity.ok(aliasService.createAlias(alias));
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getAlias(@PathVariable("id") Long id) {
        Optional<AccountAlias> alias = aliasService.findById(id);
        return alias.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateAlias(@PathVariable("id") Long id, @RequestBody AccountAlias alias) {
        Optional<AccountAlias> existing = aliasService.findById(id);
        if (existing.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        AccountAlias toUpdate = existing.get();
        toUpdate.setStatus(alias.getStatus());
        return ResponseEntity.ok(aliasService.updateAlias(toUpdate));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteAlias(@PathVariable("id") Long id) {
        aliasService.deleteById(id);
        return ResponseEntity.ok().build();
    }
}
