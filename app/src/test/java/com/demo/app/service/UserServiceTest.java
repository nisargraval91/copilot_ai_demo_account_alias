// Generated by AI (GitHub Copilot)
// Author: Nisarg Raval
package com.demo.app.service;

import com.demo.app.model.User;
import com.demo.app.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class UserServiceTest {
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private UserService userService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRegisterUserAndFindByEmail() {
        User user = new User();
        user.setEmail("test@email.com");
        user.setPassword("password");
        when(userRepository.save(any(User.class))).thenReturn(user);
        when(userRepository.findByEmail("test@email.com")).thenReturn(Optional.of(user));
        User saved = userService.registerUser(user);
        assertNotNull(saved);
        Optional<User> found = userService.findByEmail("test@email.com");
        assertTrue(found.isPresent());
        assertEquals("test@email.com", found.get().getEmail());
    }

    @Test
    void testValidatePassword() {
        User user = new User();
        user.setEmail("plain@email.com");
        user.setPassword("plain");
        // Let the real service encode the password
        when(userRepository.save(any(User.class))).thenAnswer(invocation -> invocation.getArgument(0));
        User saved = userService.registerUser(user);
        assertNotNull(saved.getPassword());
        // Validate using the same service logic
        assertTrue(userService.validatePassword("plain", saved.getPassword()));
        assertFalse(userService.validatePassword("wrong", saved.getPassword()));
    }
}
