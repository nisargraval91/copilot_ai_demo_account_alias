// Generated by AI (GitHub Copilot)
// Author: Nisarg Raval
package com.demo.app.controller;

import com.demo.app.model.User;
import com.demo.app.repository.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class AccountAliasControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private ObjectMapper objectMapper;
    private Long userId;

    @BeforeEach
    void setup() throws Exception {
        userRepository.deleteAll();
        User user = new User();
        user.setEmail("aliasuser@email.com");
        user.setPassword("aliaspass");
        user.setName("Alias User");
        String userJson = objectMapper.writeValueAsString(user);
        String response = mockMvc.perform(post("/api/users/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(userJson))
                .andReturn().getResponse().getContentAsString();
        User saved = objectMapper.readValue(response, User.class);
        userId = saved.getId();
    }

    @Test
    void testCreateAndManageAlias() throws Exception {
        // Create alias
        String aliasJson = "{\"alias\":\"myalias\",\"status\":\"active\"}";
        mockMvc.perform(post("/api/aliases/create/" + userId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(aliasJson))
                .andExpect(status().isOk());
        // Duplicate alias
        mockMvc.perform(post("/api/aliases/create/" + userId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(aliasJson))
                .andExpect(status().isBadRequest());
        // Get alias
        mockMvc.perform(get("/api/aliases/1"))
                .andExpect(status().isOk());
        // Update alias
        String updateJson = "{\"status\":\"inactive\"}";
        mockMvc.perform(put("/api/aliases/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(updateJson))
                .andExpect(status().isOk());
        // Delete alias
        mockMvc.perform(delete("/api/aliases/1"))
                .andExpect(status().isOk());
    }
}
